Remove Duplicates from an array :
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        elif len(nums)==1:
            return 1
        else:
            i=0
            for j in range(1,len(nums)):
                if nums[j]!=nums[i]:
                    nums[i+1]=nums[j]
                    i+=1
            return i+1


Rotate Array :
        if len(nums)==1 or k==0:
            return nums
        if k==len(nums):
            return nums
        if k>len(nums):
            k=k%len(nums)
        temp=nums[-k:]
        for i in range(len(nums)-k-1,-1,-1):
            nums[i+k]=nums[i]
        nums[:k]=temp


Move Zeroes to an end : 
l=[]
        for i in nums:
            if i!=0:
                l.append(i)
        nums[:len(l)]=l[:]
        for i in range(len(l),len(nums)):
            nums[i]=0
        return nums

Union of Two sorted Arrays :
i=0
        j=0
        l=[]
        while (i<n and j<m):
            if arr1[i] < arr2[j]:
                if (len(l)==0 or l[-1]!=arr1[i]):
                    l.append(arr1[i])
                i+=1
            else:
                if (len(l)==0 or l[-1]!=arr2[j]):
                    l.append(arr2[j])
                j+=1
        while (i<n):
            if (len(l)==0 or l[-1]!=arr1[i]):
                    l.append(arr1[i])
            i+=1
        while (j<m):
            if (len(l)==0 or l[-1]!=arr2[j]):
                    l.append(arr2[j])
            j+=1
        return l


Find missing number in an Array :
hash_array=[0] * (len(nums) + 1)
        for i in nums:
            hash_array[i]=1
        for i in range(len(nums)+1):
            if hash_array[i]!=1:
                return i
        return -1   
Optimal :
By using sum of natural numbers and XOR


Maximum Consecutive Ones :
maxi=0
        count=0
        for i in nums:
            if i==1:
                count+=1
                if maxi==0 or count>maxi:
                    maxi=count
            else:
                count=0 
        return maxi
